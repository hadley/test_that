# API for testthat package

## Exported functions

auto_test(code_path, test_path, reporter = default_reporter(), env = test_env(), hash = TRUE)
auto_test_package(pkg = ".", reporter = default_reporter(), hash = TRUE)
capture_condition(code)
capture_error(code)
capture_expectation(code)
capture_message(code)
capture_messages(code)
capture_output(code, print = FALSE, width = 80)
capture_output_lines(code, print = FALSE, width = 80)
capture_warning(code)
capture_warnings(code)
check_repoter()
compare(x, y, ...)
context(desc)
default_reporter()
describe(description, code)
equals(expected, label = NULL, ...)
equals_reference(file, label = NULL, ...)
evaluate_promise(code, print = FALSE)
expect(ok, failure_message, info = NULL, srcref = NULL)
expect_condition(object, regexp = NULL, class = NULL, ..., info = NULL, label = NULL)
expect_cpp_tests_pass(package)
expect_equal(object, expected, ..., info = NULL, label = NULL, expected.label = NULL)
expect_equal_to_reference(..., update = FALSE)
expect_equivalent(object, expected, ..., info = NULL, label = NULL, expected.label = NULL)
expect_error(object, regexp = NULL, class = NULL, ..., info = NULL, label = NULL)
expect_failure(expr, message = NULL, ...)
expect_false(object, info = NULL, label = NULL)
expect_gt(object, expected, label = NULL, expected.label = NULL)
expect_gte(object, expected, label = NULL, expected.label = NULL)
expect_identical(object, expected, info = NULL, label = NULL, expected.label = NULL)
expect_is(object, class, info = NULL, label = NULL)
expect_known_failure(path, expr)
expect_known_hash(object, hash = NULL)
expect_known_output(object, file, update = TRUE, ..., info = NULL, label = NULL, print = FALSE, width = 80)
expect_known_value(object, file, update = TRUE, ..., info = NULL, label = NULL)
expect_length(object, n)
expect_less_than(...)
expect_lt(object, expected, label = NULL, expected.label = NULL)
expect_lte(object, expected, label = NULL, expected.label = NULL)
expect_match(object, regexp, perl = FALSE, fixed = FALSE, ..., all = TRUE, info = NULL, label = NULL)
expect_message(object, regexp = NULL, ..., all = FALSE, info = NULL, label = NULL)
expect_more_than(...)
expect_named(object, expected, ignore.order = FALSE, ignore.case = FALSE, info = NULL, label = NULL)
expect_null(object, info = NULL, label = NULL)
expect_output(object, regexp = NULL, ..., info = NULL, label = NULL)
expect_output_file(object, file, update = TRUE, ..., info = NULL, label = NULL, print = FALSE, width = 80)
expect_reference(object, expected, info = NULL, label = NULL, expected.label = NULL)
expect_s3_class(object, class)
expect_s4_class(object, class)
expect_setequal(object, expected)
expect_silent(object)
expect_success(expr)
expect_that(object, condition, info = NULL, label = NULL)
expect_true(object, info = NULL, label = NULL)
expect_type(object, type)
expect_warning(object, regexp = NULL, ..., all = FALSE, info = NULL, label = NULL)
expectation(type, message, srcref = NULL)
fail(message = "Failure has been forced")
find_test_scripts(path, filter = NULL, invert = FALSE, ...)
get_reporter()
gives_warning(regexp = NULL, all = FALSE, ...)
has_names(expected, ignore.order = FALSE, ignore.case = FALSE)
is.expectation(x)
is_a(class)
is_equivalent_to(expected, label = NULL)
is_false()
is_identical_to(expected, label = NULL)
is_less_than(expected, label = NULL, ...)
is_more_than(expected, label = NULL, ...)
is_null()
is_testing()
is_true()
make_expectation(x, expectation = "equals")
matches(regexp, all = TRUE, ...)
not(f)
prints_text(regexp = NULL, ...)
quasi_label(quo, label = NULL)
set_reporter(reporter)
setup(code, env = parent.frame())
show_failure(expr)
shows_message(regexp = NULL, all = FALSE, ...)
skip(message)
skip_if(condition, message = deparse(substitute(condition)))
skip_if_not(condition, message = deparse(substitute(condition)))
skip_if_not_installed(pkg, minimum_version = NULL)
skip_if_translated()
skip_on_appveyor()
skip_on_bioc()
skip_on_cran()
skip_on_os(os)
skip_on_travis()
source_dir(path, pattern = "\\.[rR]$", env = test_env(), chdir = TRUE, wrap = TRUE)
source_file(path, env = test_env(), chdir = TRUE, encoding = "unknown", wrap = TRUE)
source_test_helpers(path = "tests/testthat", env = test_env())
source_test_setup(path = "tests/testthat", env = test_env())
source_test_teardown(path = "tests/testthat", env = test_env())
succeed(message = "Success has been forced")
takes_less_than(amount)
teardown(code, env = parent.frame())
test_check(package, filter = NULL, reporter = check_repoter(), ..., stop_on_failure = TRUE, stop_on_warning = FALSE, wrap = TRUE)
test_dir(path, filter = NULL, reporter = default_reporter(), env = test_env(), ..., encoding = "unknown", load_helpers = TRUE, stop_on_failure = FALSE, stop_on_warning = FALSE, wrap = TRUE)
test_env()
test_example(path)
test_examples(path = "../..")
test_file(path, reporter = default_reporter(), env = test_env(), start_end_reporter = TRUE, load_helpers = TRUE, encoding = "unknown", wrap = TRUE)
test_package(package, filter = NULL, reporter = check_repoter(), ..., stop_on_failure = TRUE, stop_on_warning = FALSE)
test_path(...)
test_rd(rd)
test_that(desc, code)
throws_error(regexp = NULL, ...)
try_again(times, code)
use_catch(dir = getwd())
watch(path, callback, pattern = NULL, hash = TRUE)
with_mock(..., .env = topenv())
with_reporter(reporter, code, start_end_reporter = TRUE)

## S3 methods

as.data.frame.testthat_results(x, ...)
as.expectation.default(x, ..., srcref = NULL)
as.expectation.error(x, ..., srcref = NULL)
as.expectation.expectation(x, ..., srcref = NULL)
as.expectation.logical(x, message, ..., srcref = NULL, info = NULL)
as.expectation.skip(x, ..., srcref = NULL)
as.expectation.warning(x, ..., srcref = NULL)
compare.POSIXt(x, y, tolerance = 0.001, ..., max_diffs = 9)
compare.character(x, y, check.attributes = TRUE, ..., max_diffs = 5, max_lines = 5, width = cli::console_width())
compare.default(x, y, ..., max_diffs = 9)
compare.numeric(x, y, tolerance = .Machine$double.eps^0.5, check.attributes = TRUE, ..., max_diffs = 9)
format.expectation(x, ...)
format.expectation_error(x, ...)
format.expectation_success(x, ...)
format.mismatch_character(x, ..., max_diffs = 5, max_lines = 5, width = cli::console_width())
format.mismatch_numeric(x, ..., max_diffs = 9, digits = 3)
print.comparison(x, ...)
print.expectation(x, ...)
print.mismatch_character(x, ...)
print.mismatch_numeric(x, ...)
print.testthat_results(x, ...)

## Exported data

CheckReporter: R6ClassGenerator (environment[24])
DebugReporter: R6ClassGenerator (environment[24])
FailReporter: R6ClassGenerator (environment[24])
JunitReporter: R6ClassGenerator (environment[24])
ListReporter: R6ClassGenerator (environment[24])
LocationReporter: R6ClassGenerator (environment[24])
MinimalReporter: R6ClassGenerator (environment[24])
MultiReporter: R6ClassGenerator (environment[24])
ProgressReporter: R6ClassGenerator (environment[24])
Reporter: R6ClassGenerator (environment[24])
RstudioReporter: R6ClassGenerator (environment[24])
SilentReporter: R6ClassGenerator (environment[24])
StopReporter: R6ClassGenerator (environment[24])
SummaryReporter: R6ClassGenerator (environment[24])
TapReporter: R6ClassGenerator (environment[24])
TeamcityReporter: R6ClassGenerator (environment[24])
