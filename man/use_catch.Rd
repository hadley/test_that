% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test-compiled-code.r
\name{use_catch}
\alias{use_catch}
\title{Use Catch for C++ Unit Testing}
\usage{
use_catch(dir = getwd())
}
\arguments{
\item{dir}{The directory containing an \R package.}
}
\description{
Add the necessary infrastructure to enable C++ unit testing
in \R packages with
\href{https://github.com/philsquared/Catch}{Catch} and \code{testthat}.
}
\details{
Calling \code{use_catch()} will:

\enumerate{

\item Create a file \code{src/test-runner.cpp}, which ensures that the
        \code{testthat} package will understand how to run your package's
        unit tests,

\item Create an example test file \code{src/test-example.cpp}, which
        showcases how you might use Catch to write a unit test, and

\item Add a test file \code{tests/testthat/test-cpp.R}, which ensures that
        \code{testthat} will run your compiled tests.
}

C++ unit tests can be added to C++ source files within the
\code{src/} directory of your package, with a format similar
to \R code tested with \code{testthat} -- for example,

\preformatted{
context("C++ Unit Test") {
  test_that("two plus two is four") {
    int result = 2 + 2;
    expect_true(result == 4);
  }
}
}

When your package is compiled, unit tests alongside a harness
for running these tests will be compiled into your \R package,
with the C entry point \code{run_testthat_tests()}. \code{testthat}
will use that entry point to run your unit tests when detected.
}
\section{Advanced Usage}{


If you'd like to write your own Catch test runner, you can
instead use the \code{testthat::catchSession()} object in a file
with the form:

\preformatted{
#define TESTTHAT_TEST_RUNNER
#include <testthat.h>

void run()
{
    Catch::Session& session = testthat::catchSession();
    // interact with the session object as desired
}
}

This can be useful if you'd like to run your unit tests
with custom arguments passed to the Catch session.
}
\seealso{
\href{https://github.com/philsquared/Catch}{Catch}, the
  library used to enable C++ unit testing.
}

